1. what is OOP (object-oriented programming)
    - use object in programming
    - use odject and class to structure code
    - help programmer create complex programs by grouping together
      related data and function
   way to organizing code to make it:
   a. reusable
   b. easy to maintain
   c. easier to understand
    
    class:
        - like a blueprint for creating object
    object:
        - just a object

2. different with "class" and "struct"
  +----------------+-------------------------+-------------------------+
  | feature        |        class            |         struct          |
  +----------------+-------------------------+-------------------------+
  | default access |       private           |         public          |
  +----------------+-------------------------+-------------------------+
  | use case       | use for complex object  | used for simple data    |
  |                | with behavior (method)  | structure               |
  +----------------+-------------------------+-------------------------+
  | inheritance    | default inheritance is  | default inheritance is  |
  |                | private                 | public                  |
  +----------------+-------------------------+-------------------------+
  when you need simple data container with public member then use "struct"
  when you need hide data then use "class"

3. OOP using four main principle

    encapsulation: (CPP00) => (hiding data inside object)
        - bundling data with method (function) that can operate on
          that data within a class
        - this hiding data within a class, preventing anything outside
          that class from directly interacting with it
        - member of other classes can interact with the attribute of another
          object through its method
          (by using "GETTER" and "SETTER")
        - EXAMPLE: encapsulate data properties and method of the data ( function )
        NOTE:
            + hiding or keeping data from external class, helps you
              keep control of your program and prevent it from becoming too
              complicated 

    polymorphism: (CPP02) => (multiple behavior for the same function)
        - one task is performed by different way
        - EXAMPLE: to tell the oeprator do other thing then do the original thing
            - like "+" is to add but you can tell it to do other thing

   inheritance: (CPP03) => (deriving new class from existing one)
        - when one object acquire all the properties of the parent object
        - EXAMPLE: you need all properties from class "car" -> name, brand, year
                   for you class "motor"
   
    abstraction: (CPP04) => (allow same function or method to behave differently based )
        - only show essential details and keeping everything hidden
        
